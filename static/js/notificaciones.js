// static/js/notificaciones.js

console.log('üöÄ [Notificaciones JS] Script inicializado - Prueba 1.');

document.addEventListener('DOMContentLoaded', function() {
    console.log('üéâ [Notificaciones JS] DOMContentLoaded disparado - Prueba 2.');

    const notificationBellLink = document.getElementById('notification-bell-link');
    const notificationBellIcon = document.getElementById('notification-bell-icon');
    const notificationBellBadge = document.getElementById('notification-bell-badge');

    if (!notificationBellLink || !notificationBellIcon || !notificationBellBadge) {
        console.warn('‚ö†Ô∏è [Notificaciones JS] Elementos de la campana no encontrados en el DOM. Revisa IDs.');
        return; // Detener la ejecuci√≥n si los elementos no est√°n.
    }

    console.log('‚úÖ [Notificaciones JS] Elementos de la campana encontrados - Prueba 3.');

    // Intentamos la llamada fetch de la manera m√°s sencilla posible
    fetch('/api/notificaciones/') // Sin el segundo argumento de opciones
        .then(response => {
            console.log('üåê [Notificaciones JS] Fetch completado. Estado:', response.status);
            if (!response.ok) {
                throw new Error(`üö´ [Notificaciones JS] Error HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('üîç [Notificaciones JS] Datos recibidos:', data);
            // Aqu√≠ ir√≠a tu l√≥gica para cambiar el color de la campana
            // Por ahora, solo queremos ver este log
        })
        .catch(error => {
            console.error('‚ùå [Notificaciones JS] Error en fetch o procesamiento de datos:', error);
        });

    // Para que se repita cada 5 segundos
    setInterval(function() {
        console.log('üîÑ [Notificaciones JS] Realizando chequeo repetido...');
        fetch('/api/notificaciones/')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`üö´ [Notificaciones JS] Error HTTP: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // L√≥gica de cambio de color aqu√≠
                if (Array.isArray(data) && data.length > 0) {
                     notificationBellLink.classList.add('has-notifications');
                     console.log('üîî Campana debe estar activa.');
                 } else {
                     notificationBellLink.classList.remove('has-notifications');
                     console.log('üí§ Campana debe estar inactiva.');
                 }
            })
            .catch(error => {
                console.error('‚ùå [Notificaciones JS] Error en chequeo repetido:', error);
            });
    }, 2000); // Repetir cada 5 segundos
});